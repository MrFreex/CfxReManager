<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAAAAAAAEAIABTGAAAFgAAAIlQTkcNChoKAAAADUlIRFIAAAEAAAABAAgEAAAA9ntg7QAAGBpJ
        REFUeNrtXQmUFdWZ7m5odpBFaMEIYlAPRFRUiOg4LKLGMCqyJSOgkogCLuBBiSDKCIgowRDPEGKOu2Oi
        KEbgOCyGbYIMo5FFhCibNLIpe6NAN01/89ereq+r6tXb6/731qv7v3OUfudV3Xv/77vb///3vwUFARWY
        nyL0wiIcwV68jIvN7xhKvZhK20ulLqLSi8SXqiUREIXoh69gymkswWV2MOD4ZFlCgccbL6OSTlulfkU1
        KNQUkAV/f+yEXZZXUwDVv8qYBDboi6qfjcG/3FHmTqqFpoAS8DsoEPlcgAcxA4+jSyYDdQz6LpiA3+Eh
        ekv1G93wawpIIoA3/E4K9MDfURn5bgsGmhBl8P6B9JQhlfSWHkngd1BAi8ze76RAL3xh+26duURMu4yL
        sd729Bf0tsTw61FAAvylSCZLMRyfO745gUEZEWAwPWGXz+mNS5OWWaopoAr8QJULPqAcwzIiwDB6Ai4K
        VaUoVVNA+uCfWL5B14wI0JWeyFz0RCAc/gFZwV+BqaiTEQHq0BMVWVFggKaAar2/Ai+iecbbwOb0VIUe
        BYKw8UsupzA7E/gdFJhNT+dAAS28Sz9v2YuemfdHq9Se9HQ2opeDysBv7AiWOX0EaZd6GT1ZlWWpmgIK
        zP2ePoIM4F+eU5l6LeDb3N83696fBQV8gt8cBfrqtUDuBOjkMOkKpoCP8Jsm5E6aALkRoBCT4JekpIDP
        8BsyyRgDtGRPgLp4A+ChgAD4QbWvqwmQCwFqYAbAQQEh8INqX0MTILc1QC/sEU8BQfDvibiRNZA5EaAY
        o3FELAUEwX+Eal6sCZC7HaAuHvWZAsvs4SEx+Ff4DP+jxvyvCaAmBV5E/aShnhp+BSlw1EeAdqBDilBP
        DX9ejwL7cbWGP8yjwHq00XN/eClwGuOtkwK69weOAmN9oEAV3kSJhj/MFKjEy7ietoMa/tBSoIIWglUa
        /jBTQPd+TQENv6aAhl9TQMOvKaDhDywFfiORAhr+UFNAwx9qCmj4Q00BDX+oKaDhDzUFNPzKUuBRfGeB
        VIb9Gv7wUaA2+mAO/oEFuBs3Y52GP3wUKEBDtELjyL+6YZOGP4wUiH4ux6ca/vASQUf7aPg1/Bp+Db+G
        P2c5iDFR+DUJwgc/sAZtkeP1E1qCC78RPvoKSnAO+uEB9EZTTYFwwW8eJPkrlqCM/n8Y7+BSTYFwwe+W
        lWbqJ00B1eBfAS7RFAht79cU0PBrCmj4NQVCOvfHU+ByTYFw9n5NAQ2/JSs0BcIMv6ZA6OHXFAg9/JoC
        oYdfUyDQG7/DmI21mgJh7f1mtE83TQF1IS9gSep6X9x9wzlRQIePBAv+s/C2T++MJaPXFPAD/lq4GsNx
        D/WrIpGhnuiIXb6916BAEdX4Hqr51dQCTYGs4W+CJ1GKCpTjSzwtLqcvfa7K8o7QRBPB01Tjcqp5KbWg
        iaZAdvA3xe9sd/eeEQh/AVphta/vr67tKWqFjiPMCv6ZWV3dnHGcv3U95RAcElTaKWqJpoCq8MfKrINH
        fL6VRFPAp8Ff+AlfYRfTaAoEAX5NgRAP/swU+L2mgIK9X1Mg9L1fU0DDrymg4dcUCOncrymg4dcUkOzy
        UQp+Ngq8EHIKqDX3S6BAOVGgWWgpoDb8bBSYhNqhJID68DNRYDeuCyEB1Fz6SaHAGTwcOgIEo/czUSB8
        BAhO72ehwE5cGyoCMPT+ExiHOv6urRENGRnnS+i4XV4PVQZSBviBk3gS9YQQoB69+aTPtf0aA1AYkiBy
        hsHflGMY7ycFYvCPpzf7L6URChShJdqhJEoGDb8yFBAMv7kOuJuWgmuwHaswAo3ykgIsg78ACjDAb9Y2
        OrV8j+fz0EDM2vt9pAAT/G4fQb6dI5ACvw8UkAJ//oWPsg/+PlFAGvz5RQGp8OdAAanw5w8FpA3+OVJA
        Ovz5QQHpvT9LCigBf/ApoAz8GVJAGfiDTQElBv8sKKAU/MGlgFK9PwMKKAe/SYGghY8qCX8aFFAS/uBR
        QFn4U1BAWfiDRQHl5v40KaA0/MGhgPLwJ6CA8vAHgwJKD/5JKBAI+NWnQCB6fzUFHquOx4/UuzZ9c0z5
        eqtLgcD0/qgcwO0OAtxO3wRB1KRA4OA35M+oHyNAfforKKLemcJAwg/8HS1iBGhBfyFAFFBpFAjU3G+X
        t9EgRoAGvqWKDhsFAgv/IQxwrAH6C8sTKkbKlZgIAgv/cTxhHsiItaIufXM8cBSQe7icIb2DKPj/wxj+
        XXaABvTtcT0KZEqAYozz/bQMK/yBpsApPE4ISCVAR2wNGPxPueEPNAW2EgJSCTAQ3wcffgcFJgaKAscJ
        AakE6I2j+QB/YEeBo4SAVAKch1UBUdX3BH/DtCKCgkSBVYSAVAIYVvR9+QF/ACmwz/RoyN0I1sSDyvvR
        vsekdOAPGAWOkeZrSjUFxTzpTyttCTiePvwBosAp0no9VWyBzRS2pZ/G9Ezgd1DgOVQo2663FUkyaSmr
        i7L2gEVolfXZwJZYqOz+v4tK8BufUb4nUPJDfsDgnE4HD6Y3qCcnSNvyMwrZwG9KfJyspEXga/wkp/wA
        P6E3qLj7n0wabyqRBLGii9EZE7AYe2iuVVG+xPk5EaANvUHNlc0e0voE0n6xBBJYRRahA6ZhB6oUXiuX
        5jgCtMdOhVtXRdqfRigUMVIg1vfPwVh84fONviJmy3tyWgP8SsmVjV3OEApjCQ2ecSAG/6V4X+Etkl2W
        mZNAVruANlgaiDZWEBqXMlAgNvT/DJ8Exl1SiXdMe3nGdoDz6MnKwLTzE0JF7FRgqaUGhig9L3rNlLOz
        sAQ2pKeqAtXOnYRMDYEUsBRzK3YnmIsOYh1Wo1xJY/ADZu9Iu51FuF9JQ3A5aXgdadp77bWb0BFFAAv+
        ztjgOQd9honohXNxC1VOlsPnCyzAXKzBNx4D905cn5EzqKfHKFdJb15DJSygkmSFwRwkDZ9Lmp5IGvda
        g20ghMRQIPLa87HIs9Ax+LGV5rgT7U9lzPPLMAht0RiNaD3cCVM94Jtv2s7TamdTzPOg0FR68zlUQmMq
        aRCVKGN9sIfqYNSwkDQ+xrMzLsre8pFKMUWYHDcrltNCqaPNJtgO29mVchKz0NqRcL0muuFj16+OoX/a
        8QD94xzcH9MbazrKaE2l8m8Rt5OGq+vQkbRfHrfimWxMdyII0Cgu+ucYnjYOWEUVS//9Ec1Q3Nb+Z6lP
        2utgfq6Ns+F9gCZpEaAx/hpnT7zWo4TGVDK3p2AdadhehxaEgJusq4yM4yII0BTrHQWdwhSnRzpiHlrN
        PPNPiU+wbilnqMs7cSh1/JwV53jIZXkfmqCERtTbeJeKqw2TjysaY4orGmO94SUQQYB6NI/ah5rXnB5p
        a++8kVEdZbQYapgkyPst1++fMVYqKVpZSHO9U95KGkj+JNWCTzbaYwBj0RivOabm+Ua3FLMIHID9sU3f
        e2jjcbziYkbv2VGMN454Jwnyvtl16v+j5AtBawG4xPHMAXpLsjLqYxyjH/Rr0nD8kZY2hEZ0Y7i/+tSj
        iHNAv8RKlNIgMz3euhb5+6dsIaKHk98NZh1b+9DxzC5zDZ20jZdR++zyYeKVQ+w+sUeoNjyyjzTsNRmd
        R4isp5qvJISKxRHAXHa0pxVw7QSDYm8mVRzC6OR3g1m1fdK1YLwjJQF+4drjP5lGKXXwEJP943D8OgbR
        JDetCZkWAj0CKEh+u1Xku+EslsADuN+Lgh71ucUxPFeakTRJn3jAsb8/Sm9IXUoBamEkvmOxBA5PoHnZ
        945ZLHyJQQnf4r5oGETKGl3pMkxNSEmAx12GlyvTtB0UY1hshSRSXlL0uumIEtoy7AH24tcuk0xBkkWa
        e1H6bEoCTEu26Erc5yLmp6EMdtCNpGVlCdBX+JaojAb/IpvSC9EYJdHVgMfceBF2OJ6fnmwjGHnfdMfv
        d9AbvOdcY+YvodILHbUZyaCBvqqmiauBGQxm33k0C16LC3EBOqAP7dnnYxUNi93jvX1WuPreDKeACa7x
        povne4uoxJeo5PlUg9upJhdQja6lmn3AkC1hhun0VQ1+Y7jdwOQS3Y/t2IqdNiPoNtzkCVQfh6G0AiNS
        EmCEw8t2jN7g9d6bqMTq35RSbbZTrXhc4RvMaQnK9f+JUuNn5hkeAVedCvGUa/jsn5IA/V2D+FPmIO/4
        VWMPbyGn73OiUmMAogaUr6SGSmwz/GSuWjXDRy5D0BUpCXAF/Sqp9TDi89wmta1fkbbVGQOsTdB0yQFU
        XxqrYxcpb3G5dRaahylSmIIXukxOt8SZvNtKPi1QRdouVitR5A34BnLl5WoXiFWns/Ce6zcT00oQMdH1
        1Hv0JqfTqx6VJle+IY0rdDawPUOekFNJNliVNFB3dKV9K8Qwl6f8gKm0lO25weVCOkZvKnSlletIJVYm
        2aqJPy6/ivYeihwOL8EcBs5/ijtpA/QZDjtW6SdpL7AAY+yx/1atrndZAID3zcCRNAJC3nc9ucMeUYho
        eNwYKnmnY9tXQbVbi+epphxh8+9Gj4PIhb8+fstyLvBjNKe1b2v8nHbbEzATf8Q0jMNdtBxqbDcDIbqU
        WxPnRrkt7ZCwW+NcWmvM5SOcpqDGVPpdVItpVJuZVKvhVLvWVMvmcQFpIuQ0Ua2BXNu/YQ0byxQQsTka
        f2AZYoq9TMHWvy/B8rjn55iRQ2m1q5FHwovl9NZ4ClR7Auz2yTZUWw4pw2+S+0RFw98Qj+EI07JnD66C
        tw0+3iC1OO7pneiRUVh4d4/AlsVuA0yi+lBNuWKjjxACDZkpYOP5LMaIuHLcl9Ya/gKamd1yjAbnTA+G
        3OeR+moBvT2dOtzHeDzmOKHQhtUNbBV2DZYwnw3+iznjJa1Va8yNs0dU0lxZP+OjYfVpyVkZt/+eGw1A
        T/JsA6opp5yhsekaNgJYW6zb8E/2ve+3ife+Fmjnkuqr4kCbg5ZZHQ5tiXc83vYXKiV5LW6gmnLLZlq4
        FrJQwEqcshEy5D3vzFix7ejrHmPS/FTDdhIKtPWw+Z+hUkqS1KJZnPmJRz437QI8BHhQktvnJMbHxwJZ
        im+OP3lsRxeZ/vysE0Rc5JEn7DSV1DxBLYqphnLS51fiAT4CTJRmAv0Ow6LRgI5PKwIl/rDkUjNBDHJZ
        63TwSBJRQaW18qhFbardd9J0M5GPAIMkJk87hOdwoWPXXQfdaKiu9DCWdsptaWS9/3KPO8UqqcTu1ZFI
        kX3DhVQzeTcP/UCosBGgreuQGPdgtx7PoA8B0x5dcTde8cxY8IkZQY/cW2scil/jaZl4lUrvSrW4nGrz
        DNVKZjzEeqZYQcbo3+RyjGAvxb4EJ3TX4zo/9sa2o6ZrE6xK9lEtdiuQLvtltmjhiEIeUjQvoCmbos4b
        +NNa49ND0s4nXb/AKF5DUG+2w1CZy0YzPhD+ttjY329Qts2HGW8OsZRxUFFVLKNZ2XermEWBq5VNG3cw
        dayDv8roJeG27bKUi6wyvE5r8QJhBCigt7+e0vtZyXpg3JQDhAgrAW5i3vAcwX+hLyZha0L/wwnqnb90
        Bm8J8YGcRaX8LWFymDPYQrXsj7fYvKTRzfFNvAQYwmgJOInF6Bdxetaknf04Anq3DYDTOIrNeI02ZC1F
        +8RsaXLvohI3U8mnbQTcTTV7jLaENSMRBf2wiNEm+AMhwkqAx9iathNjorZ363M2rqTmjsdUPIcJuB+3
        oV00U4BoJdhqUZdKvY1Kn0C1mEq1GUK1OttRzxZ4OC4sTZw8xkmAGpjJ5Ohcgu7R7JfpfFjjIVJ/ivCv
        NA7wOM1nGnriUkADvMuyt30zGuyJlABIiolKWAtb2MwbLDaTd41oCa6Gc+QCq6KFVIliZ+CyjZp+i+HQ
        zGozRpinURxHo7bRcirQ8DvcSRz6asdHgGsYcmG8avragi6Wv/JV4frab4aF8TToDuHJks/gEaOkLYEn
        wBZTY48IXwp+nzwBlr8EGCd8TjuBO/Oh/8c0dqfwvMJVhAoTAYrxBwbDxuC8IgDH/YN/MMLlOJrT2JV+
        UUzQx6i8IsAohmCRD50pMsQ1pyXL0Uf1MuFkDz9H9iQjBqolz61h57OkR1hhRt7mBQGaU2vEy5eCroqI
        a057VzZdMfItuuUNAbqxHBUpJWRYCHAF09HH6WZCyMDDX9OVe1CU7EmeAcm/Bl3iSqMkSjYpkAPDDztg
        B2oJh+wyD7BzGIJ5nJxnMCXYY4DV/6cw+QN3sBiDWW/U3m7m6USQ+38Xtmu0/mkcE+do1rmMx0Le9j4O
        Ghj4m3nkGhEla43jahwNK2G8GOokHg2mPcDa/z/KGBb2P8Z1ERwNc+ffFCvf4MbgjQFW/7+RNXviQiG3
        hXk0rR7eBKesME+9IWjwt2Ux/1TLHJaYoEjTJrM27AxeyCTFiyLw16da86bQ+T1LVGCkcb9myIRpl2N4
        OJ1LYhSCvxijmQ+MVtF6gy0eoDt7GoQD+FU0J0AA4C/CUHYNHcdAzpjAreCWPRjAlAYpdwL098xYIFo/
        V/ERoLlHJk4Os9DNao8BiL9NhE8+MZPW8DSzFv4IGbLR9BBCZfivk3SI/BW2INpIM+9hXgZGZZ1/qR8E
        gG+kkfhMil6sIFq+xnZkvCTaKZvR2569Xyn4f87k9/NaJPfkJUAjfABZsh39VNoRxFb+fSXeJPS/5tlo
        ziaPZTZzOD3fg6JHRhWBvwbVaBfkyfOsHhNrsfOtxAbvw8hkl8czw1+ParNPojbKaExkTxjfAishU45i
        avV5fKkz/9l4xnFHOb98auYw5216IR6XOAkYUo43oomgJR4P/zHeZLwdwFumsbvMI03vxJj/IpH9ewk6
        y6BADP6f4iPJ9yUa+ZN7sHcB68zrnyBfNtD8x+wossCvhQFKJI+cjyZyCFCAmyUmR66WbzGBM3AsFuz1
        hNRlcLUT6N/lXRvVFP8NFeQU/hxNDM+UJKoD3pJkC3XLR0YgmIRlsKWIexVRA/B/uFG0hTB2J+kNntnD
        ZcgJDJV7c2Brj1z6smQbbhfrMLbg7yPBGZ5IVrJaAD37Qy/ahRpZsH5QYCzYHN0TCGxvZ6ZLIdOb+kao
        cHnsRRhJC6I78JL0DRFoLdBIKAEaUQnqyBpmA1CSRZF5l9jn0lVyQFzWbM+bxeUawkYp4A9xUOBe4cmj
        0rGKFQkjQBG9XR1Zat5gqI5LtBCDFbhGYr6oRCmR5DjzlYH/YDq3ofMS4BolVsefGf1CUBtbSYr38ZJZ
        pjdUnZiYGooMj/8QdUSSLTtSOrIRHZWKioqkT39DCdUsMczCgtrY1OMeUTnmn/sVC5FXaASYIeqAVKSN
        v1WijfPMSIgCpQhgxAjtkq6ao+gjdBvYR3LohyF7opHRqhGgGE9ID434QJxrNNLGJhKDYU2pxFTUUu5s
        RCwz/jypyvlaZN+w2thTchjMQvxIycMxlnq6YotEK6B1gFRoG4twt8QbwrfiX5Q9G2UZg0bguCTDyP3m
        0CjcHVyM4ZIMwmW4V+kDspa75JX8hF86Baowy8gBovD56Fi0zKf5Cb9kCqyIxkAXKE+BW5mSybLDL5EC
        u0w/p/I5UqyDUg+z+QWZ4XdQYAQbBX4gjQYjXR6iK4HZLMdGJMAvhQKvGj7OgKTJQjRacFG+ws9OgaVm
        FuDAJMqzlHO14NPyEuFnpcAX6Bq4VJmWcn4h0GQiGX42Cuw2vRuBS5ZrHZ4aJ+i2LAXgZ6HAUXpzMO9O
        slRzFv5TwNXJisAvnALlmIp6gb0xAdGLpt/JX/iFUqAKr0czIBQEmgIX4m/5C79ACiwOWpLsxKrpjHX5
        C7+tnbV8pMB6kaec+FXzM1+86IrC7xgFRvpCgVL8W17AbztROzjnLaHC8PtMgf0YEoTU2JmpphgP55RA
        XXH4faTAIZpIauYN+DbF1MdTWVsFAgC/Yy2QPQXKMBa186j3u6wCM7IKGw0I/D5Q4ASmBOl2lMwV0wwv
        ZnyReoDgz5ECFXghQF6/rA1Db2bkKA4Y/DlQ4AxeMW9Mz0v4bYo5D3PzGf4sKVCFOeZx77yF36aYdmme
        sQso/FlR4MMARPz5qJhL0rhTL8DwZ0yB5UG/KT1zxVyVItn0PtoN18qL6+MNA3HyXOIrcWVo4LcppgOt
        BRJtCjdhoGkMQT60tCa1ZlNCl+/cEPV+l2JKMBprXcah0yjFLFyh4s1AObS0gFo0i1p22hXru5Y0UBI6
        +G2KKUR7UsECbEMZTmIvVuM5dI9eBYF8aqmRQqM7nsXH1MqT1Npt1OrR1HrJ9x/9P6PktCAKuusJAAAA
        AElFTkSuQmCC
</value>
  </data>
</root>